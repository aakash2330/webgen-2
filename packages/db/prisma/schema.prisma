// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String
  password  String
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum SandboxStatus {
  PENDING
  RUNNING
  STOPPED
  FAILED
}

model Project {
  id           String        @id @default(uuid())
  name         String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  files        File[]
  sandbox      Sandbox?
  chatSessions ChatSession[]
  archivedAt   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Sandbox {
  id        String        @id
  url       String
  status    SandboxStatus @default(PENDING)
  projectId String        @unique
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum ChatMessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model ChatSession {
  id        String        @id @default(uuid())
  title     String?
  projectId String?
  project   Project?      @relation(fields: [projectId], references: [id])
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ChatMessage {
  id        String          @id @default(uuid())
  sessionId String
  session   ChatSession     @relation(fields: [sessionId], references: [id])
  role      ChatMessageRole
  content   String
  metadata  Json?
  createdAt DateTime        @default(now())
}

model File {
  id           String   @id @default(cuid())
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  path         String
  content      Json
  lastModified DateTime @default(now())
  isDeleted    Boolean  @default(false)
}
